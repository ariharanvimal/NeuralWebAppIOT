{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-mqtt\";\nexport class MqttDashboardComponent {\n  constructor(mqttService) {\n    this.mqttService = mqttService;\n    this.title = 'NeuralIOT';\n    this.mqttService.connect();\n  }\n  ngOnInit() {\n    this.mqttService.observe('env').subscribe(message => {\n      const payloadString = message.payload.toString(); // Assuming UTF-8 encoding\n      const payloadObject = JSON.parse(payloadString);\n      console.log(`Received message on topic ${message.topic}:`, payloadObject);\n      // Perform actions based on the received message\n      this.handleMessage(payloadObject);\n    });\n  }\n  handleMessage(message) {\n    // Your logic to handle the received message\n    // For example, update a variable, call a function, etc.\n    console.log('Handling message:', message);\n    // Perform your specific actions here\n  }\n  static #_ = this.ɵfac = function MqttDashboardComponent_Factory(t) {\n    return new (t || MqttDashboardComponent)(i0.ɵɵdirectiveInject(i1.MqttService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MqttDashboardComponent,\n    selectors: [[\"app-mqtt-dashboard\"]],\n    decls: 2,\n    vars: 0,\n    template: function MqttDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"mqtt-dashboard works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAc/B,UAAK,GAAG,WAAW;IAbjB,IAAI,CAACA,WAAW,CAACC,OAAO,EAAE;EAC5B;EACAC,QAAQ;IACN,IAAI,CAACF,WAAW,CAACG,OAAO,CAAC,KAAK,CAAC,CAACC,SAAS,CAAEC,OAAqB,IAAI;MAClE,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAO,CAACC,QAAQ,EAAE,CAAC,CAAC;MAClD,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;MAE/CM,OAAO,CAACC,GAAG,CAAC,6BAA6BR,OAAO,CAACS,KAAK,GAAG,EAAEL,aAAa,CAAC;MAEzE;MACA,IAAI,CAACM,aAAa,CAACN,aAAa,CAAC;IACnC,CAAC,CAAC;EACJ;EAEAM,aAAa,CAACV,OAAe;IAC3B;IACA;IACAO,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAER,OAAO,CAAC;IACzC;EACF;EAAC;qBAtBUP,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAAkB;IAAAC;IAAAC;IAAAC;MAAA;QCRnCC,yBAAG;QAAAA,qCAAqB;QAAAA,iBAAI","names":["MqttDashboardComponent","constructor","mqttService","connect","ngOnInit","observe","subscribe","message","payloadString","payload","toString","payloadObject","JSON","parse","console","log","topic","handleMessage","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Ariharan\\Desktop\\NeuralWebAppIOT\\WebIOTApplication\\UI\\NeuralIOT\\src\\app\\Components\\mqtt-dashboard\\mqtt-dashboard.component.ts","C:\\Users\\Ariharan\\Desktop\\NeuralWebAppIOT\\WebIOTApplication\\UI\\NeuralIOT\\src\\app\\Components\\mqtt-dashboard\\mqtt-dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MqttService, IMqttMessage } from 'ngx-mqtt';\n\n@Component({\n  selector: 'app-mqtt-dashboard',\n  templateUrl: './mqtt-dashboard.component.html',\n  styleUrls: ['./mqtt-dashboard.component.css'],\n})\nexport class MqttDashboardComponent implements OnInit {\n  client!: any;\n  constructor(private mqttService: MqttService) {\n    this.mqttService.connect();\n  }\n  ngOnInit(): void {\n    this.mqttService.observe('env').subscribe((message: IMqttMessage) => {\n      const payloadString = message.payload.toString(); // Assuming UTF-8 encoding\n      const payloadObject = JSON.parse(payloadString);\n\n      console.log(`Received message on topic ${message.topic}:`, payloadObject);\n\n      // Perform actions based on the received message\n      this.handleMessage(payloadObject);\n    });\n  }\n  title = 'NeuralIOT';\n  handleMessage(message: string): void {\n    // Your logic to handle the received message\n    // For example, update a variable, call a function, etc.\n    console.log('Handling message:', message);\n    // Perform your specific actions here\n  }\n}\n","<p>mqtt-dashboard works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}