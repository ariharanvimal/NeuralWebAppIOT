{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-mqtt\";\nimport * as i2 from \"@angular/common\";\nfunction MqttDashboardComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Humidity: \", ctx_r0.msg.hum, \"\");\n  }\n}\nfunction MqttDashboardComponent_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Temperature: \", ctx_r1.msg.temp, \"\");\n  }\n}\nexport class MqttDashboardComponent {\n  constructor(mqttService) {\n    this.mqttService = mqttService;\n    this.title = 'NeuralIOT';\n    this.mqttService.connect();\n  }\n  ngOnInit() {\n    this.mqttService.observe('env').subscribe(message => {\n      const payloadString = message.payload.toString(); // Assuming UTF-8 encoding\n      const payloadObject = JSON.parse(payloadString);\n      console.log(`Received message on topic ${message.topic}:`, payloadObject);\n      // Perform actions based on the received message\n      this.handleMessage(payloadObject);\n    });\n  }\n  handleMessage(message) {\n    this.msg = message;\n    console.log('Handling message:', message);\n    // Perform your specific actions here\n  }\n  static #_ = this.ɵfac = function MqttDashboardComponent_Factory(t) {\n    return new (t || MqttDashboardComponent)(i0.ɵɵdirectiveInject(i1.MqttService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MqttDashboardComponent,\n    selectors: [[\"app-mqtt-dashboard\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"]],\n    template: function MqttDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MqttDashboardComponent_p_0_Template, 2, 1, \"p\", 0);\n        i0.ɵɵtemplate(1, MqttDashboardComponent_p_1_Template, 2, 1, \"p\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.msg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.msg);\n      }\n    },\n    dependencies: [i2.NgIf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;IAAAA,yBAAe;IAAAA,YAAuB;IAAAA,iBAAI;;;;IAA3BA,eAAuB;IAAvBA,uDAAuB;;;;;IACtCA,yBAAe;IAAAA,YAA2B;IAAAA,iBAAI;;;;IAA/BA,eAA2B;IAA3BA,2DAA2B;;;ACO1C,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAc/B,UAAK,GAAG,WAAW;IAbjB,IAAI,CAACA,WAAW,CAACC,OAAO,EAAE;EAC5B;EACAC,QAAQ;IACN,IAAI,CAACF,WAAW,CAACG,OAAO,CAAC,KAAK,CAAC,CAACC,SAAS,CAAEC,OAAqB,IAAI;MAClE,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAO,CAACC,QAAQ,EAAE,CAAC,CAAC;MAClD,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;MAE/CM,OAAO,CAACC,GAAG,CAAC,6BAA6BR,OAAO,CAACS,KAAK,GAAG,EAAEL,aAAa,CAAC;MAEzE;MACA,IAAI,CAACM,aAAa,CAACN,aAAa,CAAC;IACnC,CAAC,CAAC;EACJ;EAEAM,aAAa,CAACV,OAAe;IAC3B,IAAI,CAACW,GAAG,GAAGX,OAAO;IAClBO,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAER,OAAO,CAAC;IACzC;EACF;EAAC;qBAtBUP,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAAmB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDRnCxB,mEAA0C;QAC1CA,mEAA8C;;;QAD1CA,8BAAS;QACTA,eAAS;QAATA,8BAAS","names":["i0","MqttDashboardComponent","constructor","mqttService","connect","ngOnInit","observe","subscribe","message","payloadString","payload","toString","payloadObject","JSON","parse","console","log","topic","handleMessage","msg","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Ariharan\\Desktop\\NeuralWebAppIOT\\WebIOTApplication\\UI\\NeuralIOT\\src\\app\\Components\\mqtt-dashboard\\mqtt-dashboard.component.html","C:\\Users\\Ariharan\\Desktop\\NeuralWebAppIOT\\WebIOTApplication\\UI\\NeuralIOT\\src\\app\\Components\\mqtt-dashboard\\mqtt-dashboard.component.ts"],"sourcesContent":["<p *ngIf=\"msg\">Humidity: {{ msg.hum }}</p>\n<p *ngIf=\"msg\">Temperature: {{ msg.temp }}</p>\n","import { Component, OnInit } from '@angular/core';\nimport { MqttService, IMqttMessage } from 'ngx-mqtt';\n\n@Component({\n  selector: 'app-mqtt-dashboard',\n  templateUrl: './mqtt-dashboard.component.html',\n  styleUrls: ['./mqtt-dashboard.component.css'],\n})\nexport class MqttDashboardComponent implements OnInit {\n  client!: any;\n  msg: any;\n  constructor(private mqttService: MqttService) {\n    this.mqttService.connect();\n  }\n  ngOnInit(): void {\n    this.mqttService.observe('env').subscribe((message: IMqttMessage) => {\n      const payloadString = message.payload.toString(); // Assuming UTF-8 encoding\n      const payloadObject = JSON.parse(payloadString);\n\n      console.log(`Received message on topic ${message.topic}:`, payloadObject);\n\n      // Perform actions based on the received message\n      this.handleMessage(payloadObject);\n    });\n  }\n  title = 'NeuralIOT';\n  handleMessage(message: string): void {\n    this.msg = message;\n    console.log('Handling message:', message);\n    // Perform your specific actions here\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}